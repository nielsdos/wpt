<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Document-importNode.html");
$document = DOM\HTMLDocument::createFromString($html);
;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html><head></head><body></body></html>");
  $div = $doc->getElementsByTagName("body")[0]->appendChild($doc->createElement("div"));
  $div->appendChild($doc->createElement("span"));
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  $newDiv = $document->importNode($div);
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  assert_equals($newDiv->ownerDocument, $document);
  assert_equals($newDiv->firstChild, null);
}, "No 'deep' argument.");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html><head></head><body></body></html>");
  $div = $doc->getElementsByTagName("body")[0]->appendChild($doc->createElement("div"));
  $div->appendChild($doc->createElement("span"));
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  $newDiv = $document->importNode($div);
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  assert_equals($newDiv->ownerDocument, $document);
  assert_equals($newDiv->firstChild, null);
}, "Undefined 'deep' argument.");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html><head></head><body></body></html>");
  $div = $doc->getElementsByTagName("body")[0]->appendChild($doc->createElement("div"));
  $div->appendChild($doc->createElement("span"));
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  $newDiv = $document->importNode($div, true);
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  assert_equals($newDiv->ownerDocument, $document);
  assert_equals($newDiv->firstChild->ownerDocument, $document);
}, "True 'deep' argument.");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html><head></head><body></body></html>");
  $div = $doc->getElementsByTagName("body")[0]->appendChild($doc->createElement("div"));
  $div->appendChild($doc->createElement("span"));
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  $newDiv = $document->importNode($div, false);
  assert_equals($div->ownerDocument, $doc);
  assert_equals($div->firstChild->ownerDocument, $doc);
  assert_equals($newDiv->ownerDocument, $document);
  assert_equals($newDiv->firstChild, null);
}, "False 'deep' argument.");
;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html><head></head><body></body></html>");
  $doc->getElementsByTagName("body")[0]->setAttributeNS("http://example.com/", "p:name", "value");
  $originalAttr = $doc->getElementsByTagName("body")[0]->getAttributeNodeNS("http://example.com/", "name");
  $imported = $document->importNode($originalAttr, true);
  assert_equals($imported->prefix, $originalAttr->prefix);
  assert_equals($imported->namespaceURI, $originalAttr->namespaceURI);
  assert_equals($imported->localName, $originalAttr->localName);
}, "Import an Attr node with namespace/prefix correctly.");
;