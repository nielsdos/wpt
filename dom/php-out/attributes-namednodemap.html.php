<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/attributes-namednodemap.html");
$document = DOM\HTMLDocument::createFromString($html);

test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttribute("x", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
  assert_equals($element->attributes['x']->value, "first");
;
}, "an attribute set by setAttribute should be accessible as a field on the attributes field of an Element");
;
/*test(function() {global $document;
;
  $element = $document->createElement("div");
  $map = $element->attributes;
;
  assert_equals($map->length, 0);
;
  $attr1 = $document->createAttribute("attr1");
  $map->setNamedItem($attr1);
  assert_equals($map->attr1, $attr1);
  assert_equals($map->length, 1);
;
  $attr2 = $document->createAttribute("attr2");
  $map->setNamedItem($attr2);
  assert_equals($map->attr2, $attr2);
  assert_equals($map->length, 2);
;
  $rm1 = $map->removeNamedItem("attr1");
  assert_equals($rm1, $attr1);
  assert_equals($map->length, 1);
;
  $rm2 = $map->removeNamedItem("attr2");
  assert_equals($rm2, $attr2);
  assert_equals($map->length, 0);
;
}, "setNamedItem and removeNamedItem on attributes should add and remove fields from attributes");*/
;
/*test(function() {global $document;
;
  $element = $document->createElement("div");
  $map = $element->attributes;
;
  $fooAttribute = $document->createAttribute("foo");
  $map->setNamedItem($fooAttribute);
;
  $itemAttribute = $document->createAttribute("item");
  $map->setNamedItem($itemAttribute);
;
  assert_equals($map->foo, $fooAttribute);
  // assert_equals($map->item, NamedNodeMap->prototype->item);
  // assert_equals(typeof $map->item, "function");
;
  $map->removeNamedItem("item");
  // assert_equals($map->item, NamedNodeMap->prototype->item);
  // assert_equals(typeof $map->item, "function");
;
}, "setNamedItem and removeNamedItem on attributes should not interfere with existing method names");*/
;
test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttributeNS(null, "x", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
  assert_equals($element->attributes['x']->value, "first");
;
}, "an attribute with a null namespace should be accessible as a field on the attributes field of an Element");
;
test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttributeNS("foo", "x", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
  assert_equals($element->attributes['x']->value, "first");
;
}, "an attribute with a set namespace should be accessible as a field on the attributes field of an Element");
;
test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttributeNS("foo", "setNamedItem", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
  // assert_equals(typeof $element->attributes->setNamedItem, "function");
;
}, "setting an attribute should not overwrite the methods of an NamedNodeMap object");
;
test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttributeNS("foo", "toString", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
  // assert_equals(typeof $element->attributes->toString, "function");
;
}, "setting an attribute should not overwrite the methods defined by prototype ancestors of an NamedNodeMap object");
;
test(function() {global $document;
;
  $element = $document->createElement("div");
  $element->setAttributeNS("foo", "length", "first");
;
  assert_equals($element->attributes->length, 1, "one attribute");
;
}, "setting an attribute should not overwrite the the length property of an NamedNodeMap object");
;
;