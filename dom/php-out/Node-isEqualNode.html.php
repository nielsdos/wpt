<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Node-isEqualNode.html");
$document = DOM\HTMLDocument::createFromString($html);
/*
test(function() {global $document;
;
  $doctype1 = $document->implementation->createDocumentType("qualifiedName", "publicId", "systemId");
  $doctype2 = $document->implementation->createDocumentType("qualifiedName", "publicId", "systemId");
  $doctype3 = $document->implementation->createDocumentType("qualifiedName2", "publicId", "systemId");
  $doctype4 = $document->implementation->createDocumentType("qualifiedName", "publicId2", "systemId");
  $doctype5 = $document->implementation->createDocumentType("qualifiedName", "publicId", "systemId3");
;
  assert_true($doctype1->isEqualNode($doctype1), "self-comparison");
  assert_true($doctype1->isEqualNode($doctype2), "same properties");
  assert_false($doctype1->isEqualNode($doctype3), "different name");
  assert_false($doctype1->isEqualNode($doctype4), "different public ID");
  assert_false($doctype1->isEqualNode($doctype5), "different system ID");
;
}, "doctypes should be compared on name, public ID, and system ID");
;*/
test(function() {global $document;
;
  $element1 = $document->createElementNS("namespace", "prefix:localName");
  $element2 = $document->createElementNS("namespace", "prefix:localName");
  $element3 = $document->createElementNS("namespace2", "prefix:localName");
  $element4 = $document->createElementNS("namespace", "prefix2:localName");
  $element5 = $document->createElementNS("namespace", "prefix:localName2");
;
  $element6 = $document->createElementNS("namespace", "prefix:localName");
  $element6->setAttribute("foo", "bar");
;
  assert_true($element1->isEqualNode($element1), "self-comparison");
  assert_true($element1->isEqualNode($element2), "same properties");
  assert_false($element1->isEqualNode($element3), "different namespace");
  assert_false($element1->isEqualNode($element4), "different prefix");
  assert_false($element1->isEqualNode($element5), "different local name");
  assert_false($element1->isEqualNode($element6), "different number of attributes");
;
}, "elements should be compared on namespace, namespace prefix, local name, and number of attributes");
;
test(function() {global $document;
;
  $element1 = $document->createElement("element");
  $element1->setAttributeNS("namespace", "prefix:localName", "value");
;
  $element2 = $document->createElement("element");
  $element2->setAttributeNS("namespace", "prefix:localName", "value");
;
  $element3 = $document->createElement("element");
  $element3->setAttributeNS("namespace2", "prefix:localName", "value");
;
  $element4 = $document->createElement("element");
  $element4->setAttributeNS("namespace", "prefix2:localName", "value");
;
  $element5 = $document->createElement("element");
  $element5->setAttributeNS("namespace", "prefix:localName2", "value");
;
  $element6 = $document->createElement("element");
  $element6->setAttributeNS("namespace", "prefix:localName", "value2");
;
  assert_true($element1->isEqualNode($element1), "self-comparison");
  assert_true($element1->isEqualNode($element2), "attribute with same properties");
  assert_false($element1->isEqualNode($element3), "attribute with different namespace");
  assert_true($element1->isEqualNode($element4), "attribute with different prefix");
  assert_false($element1->isEqualNode($element5), "attribute with different local name");
  assert_false($element1->isEqualNode($element6), "attribute with different value");
;
}, "elements should be compared on attribute namespace, local name, and value");
;
test(function() {global $document;
;
  $pi1 = $document->createProcessingInstruction("target", "data");
  $pi2 = $document->createProcessingInstruction("target", "data");
  $pi3 = $document->createProcessingInstruction("target2", "data");
  $pi4 = $document->createProcessingInstruction("target", "data2");
;
  assert_true($pi1->isEqualNode($pi1), "self-comparison");
  assert_true($pi1->isEqualNode($pi2), "same properties");
  assert_false($pi1->isEqualNode($pi3), "different target");
  assert_false($pi1->isEqualNode($pi4), "different data");
;
}, "processing instructions should be compared on target and data");
;
test(function() {global $document;
;
  $text1 = $document->createTextNode("data");
  $text2 = $document->createTextNode("data");
  $text3 = $document->createTextNode("data2");
;
  assert_true($text1->isEqualNode($text1), "self-comparison");
  assert_true($text1->isEqualNode($text2), "same properties");
  assert_false($text1->isEqualNode($text3), "different data");
;
}, "text nodes should be compared on data");
;
test(function() {global $document;
;
  $comment1 = $document->createComment("data");
  $comment2 = $document->createComment("data");
  $comment3 = $document->createComment("data2");
;
  assert_true($comment1->isEqualNode($comment1), "self-comparison");
  assert_true($comment1->isEqualNode($comment2), "same properties");
  assert_false($comment1->isEqualNode($comment3), "different data");
;
}, "comments should be compared on data");
;
test(function() {global $document;
;
  $documentFragment1 = $document->createDocumentFragment();
  $documentFragment2 = $document->createDocumentFragment();
;
  assert_true($documentFragment1->isEqualNode($documentFragment1), "self-comparison");
  assert_true($documentFragment1->isEqualNode($documentFragment2), "same properties");
;
}, "document fragments should not be compared based on properties");
;
/*test(function() {global $document;
;
  $document1 = $document->implementation->createDocument("", "");
  $document2 = $document->implementation->createDocument("", "");
;
  assert_true($document1->isEqualNode($document1), "self-comparison");
  assert_true($document1->isEqualNode($document2), "another empty XML document");
;
  $htmlDoctype = $document->implementation->createDocumentType("html", "", "");
  $document3 = $document->implementation->createDocument("http://www.w3.org/1999/xhtml", "html", $htmlDoctype);
  $document3->documentElement->appendChild($document3->createElement("head"));
  $document3->documentElement->appendChild($document3->createElement("body"));
  $document4 = $document->implementation->createHTMLDocument();
  assert_true($document3->isEqualNode($document4), "default HTML documents, created different ways");
;
}, "documents should not be compared based on properties");*/
;/*
test(function() {global $document;
;
  testDeepEquality(function() {global $document; return $document->createElement("foo"); });
  testDeepEquality(function() {global $document; return $document->createDocumentFragment(); });
  testDeepEquality(function() {global $document; return $document->implementation->createDocument("", ""); });
  testDeepEquality(function() {global $document; return $document->implementation->createHTMLDocument(); });
;
  function testDeepEquality($parentFactory) {global $document;
    // Some ad-hoc tests of deep equality;
;
    $parentA = parentFactory();
    $parentB = parentFactory();
;
    $parentA->appendChild($document->createComment("data"));
    assert_false($parentA->isEqualNode($parentB));
    $parentB->appendChild($document->createComment("data"));
    assert_true($parentA->isEqualNode($parentB));
  };
;
}, "node equality testing should test descendant equality too");
;*/