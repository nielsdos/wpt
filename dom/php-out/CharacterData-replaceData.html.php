<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/CharacterData-replaceData.html");
$document = DOM\HTMLDocument::createFromString($html);
;
function testNode($create, $type) {global $document;
  // Step 2->;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->replaceData(5, 1, "x"); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->replaceData(5, 0, ""); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->replaceData(-1, 1, "x"); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->replaceData(-1, 0, ""); });
    assert_equals($node->data, "test");
  }, $type . "->replaceData() with invalid offset");
;
  // Step 3->;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(2, 10, "yo");
    assert_equals($node->data, "teyo");
  }, $type . "->replaceData() with clamped count");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(2, -1, "yo");
    assert_equals($node->data, "teyo");
  }, $type . "->replaceData() with negative clamped count");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 0, "yo");
    assert_equals($node->data, "yotest");
  }, $type . "->replaceData() before the start");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 2, "y");
    assert_equals($node->data, "yst");
  }, $type . "->replaceData() at the start (shorter)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 2, "yo");
    assert_equals($node->data, "yost");
  }, $type . "->replaceData() at the start (equal length)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 2, "yoa");
    assert_equals($node->data, "yoast");
  }, $type . "->replaceData() at the start (longer)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(1, 2, "o");
    assert_equals($node->data, "tot");
  }, $type . "->replaceData() in the middle (shorter)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(1, 2, "yo");
    assert_equals($node->data, "tyot");
  }, $type . "->replaceData() in the middle (equal length)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(1, 1, "waddup");
    assert_equals($node->data, "twaddupst");
    $node->replaceData(1, 1, "yup");
    assert_equals($node->data, "tyupaddupst");
  }, $type . "->replaceData() in the middle (longer)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(1, 20, "yo");
    assert_equals($node->data, "tyo");
  }, $type . "->replaceData() at the end (shorter)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(2, 20, "yo");
    assert_equals($node->data, "teyo");
  }, $type . "->replaceData() at the end (same length)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(4, 20, "yo");
    assert_equals($node->data, "testyo");
  }, $type . "->replaceData() at the end (longer)");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 4, "quux");
    assert_equals($node->data, "quux");
  }, $type . "->replaceData() the whole string");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->replaceData(0, 4, "");
    assert_equals($node->data, "");
  }, $type . "->replaceData() with the empty string");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->data = "This is the character data test, append è³‡æ–™ï¼Œæ›´å¤šè³‡æ–™";
;
    $node->replaceData(33, 6, "other");
    assert_equals($node->data, "This is the character data test, other è³‡æ–™ï¼Œæ›´å¤šè³‡æ–™");
    $node->replaceData(44, 2, "æ–‡å­—");
    assert_equals($node->data, "This is the character data test, other è³‡æ–™ï¼Œæ›´å¤šæ–‡å­—");
  }, $type . "->replaceData() with non-ASCII data");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->data = "ğŸŒ  test ğŸŒ  TEST";
;
    $node->replaceData(4, 7, "--");  // DEVIATION UTF8!!! Counting UTF-16 code units;
    assert_equals($node->data, "ğŸŒ  te--ST");
  }, $type . "->replaceData() with non-BMP data");
};
;
testNode(function() {global $document; return $document->createTextNode("test"); }, "Text");
testNode(function() {global $document; return $document->createComment("test"); }, "Comment");
;