<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/ChildNode-replaceWith.html");
$document = DOM\HTMLDocument::createFromString($html);
;
;
function test_replaceWith($child, $nodeName, $innerHTML) {global $document;
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $parent->appendChild($child);
        $child->replaceWith();
        assert_equals(innerHTML($parent), '');
    }, $nodeName . '->replaceWith() without any argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $parent->appendChild($child);
        $child->replaceWith(null);
        assert_equals(innerHTML($parent), 'null');
    }, $nodeName . '->replaceWith() with null as an argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $parent->appendChild($child);
        $child->replaceWith(undefined);
        assert_equals(innerHTML($parent), 'undefined');
    }, $nodeName . '->replaceWith() with undefined as an argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $parent->appendChild($child);
        $child->replaceWith('');
        assert_equals(innerHTML($parent), '');
    }, $nodeName . '->replaceWith() with empty string as an argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $parent->appendChild($child);
        $child->replaceWith('text');
        assert_equals(innerHTML($parent), 'text');
    }, $nodeName . '->replaceWith() with only text as an argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $parent->appendChild($child);
        $child->replaceWith($x);
        assert_equals(innerHTML($parent), '<x></x>');
    }, $nodeName . '->replaceWith() with only one element as an argument->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $y = $document->createElement('y');
        $z = $document->createElement('z');
        $parent->appendChild($y);
        $parent->appendChild($child);
        $parent->appendChild($x);
        $child->replaceWith($x, $y, $z);
        assert_equals(innerHTML($parent), '<x></x><y></y><z></z>');
    }, $nodeName . '->replaceWith() with sibling of child as arguments->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $parent->appendChild($child);
        $parent->appendChild($x);
        $parent->appendChild($document->createTextNode('1'));
        $child->replaceWith($x, '2');
        assert_equals(innerHTML($parent), '<x></x>21');
    }, $nodeName . '->replaceWith() with one sibling of child and text as arguments->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $parent->appendChild($child);
        $parent->appendChild($x);
        $parent->appendChild($document->createTextNode('text'));
        $child->replaceWith($x, $child);
        assert_equals(innerHTML($parent), '<x></x>' . $innerHTML . 'text');
    }, $nodeName . '->replaceWith() with one sibling of child and child itself as arguments->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $parent->appendChild($child);
        $child->replaceWith($x, 'text');
        assert_equals(innerHTML($parent), '<x></x>text');
    }, $nodeName . '->replaceWith() with one element and text as arguments->');
;
    test(function() use ($child, $nodeName, $innerHTML) {global $document;
        $parent = $document->createElement('div');
        $x = $document->createElement('x');
        $y = $document->createElement('y');
        $parent->appendChild($x);
        $parent->appendChild($y);
        $child->replaceWith($x, $y);
        assert_equals(innerHTML($parent), '<x></x><y></y>');
    }, $nodeName . '->replaceWith() on a parentless child with two elements as arguments->');
};
;
test_replaceWith($document->createComment('test'), 'Comment', '<!--test-->');
test_replaceWith($document->createElement('test'), 'Element', '<test></test>');
test_replaceWith($document->createTextNode('test'), 'Text', 'test');
;
;