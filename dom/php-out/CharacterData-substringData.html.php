<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/CharacterData-substringData.html");
$document = DOM\HTMLDocument::createFromString($html);
;
function testNode($create, $type) {global $document;
  /*test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_throws_js(TypeError, function() {global $document; $node->substringData(); });
    assert_throws_js(TypeError, function() {global $document; $node->substringData(0); });
  }, $type . "->substringData() with too few arguments");*/
;
/*  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, 1, "test"), "t");
  }, $type . "->substringData() with too many arguments");
;*/
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->substringData(5, 0); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->substringData(6, 0); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->substringData(-1, 0); });
  }, $type . "->substringData() with invalid offset");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, 1), "t");
    assert_equals($node->substringData(1, 1), "e");
    assert_equals($node->substringData(2, 1), "s");
    assert_equals($node->substringData(3, 1), "t");
    assert_equals($node->substringData(4, 1), "");
  }, $type . "->substringData() with in-bounds offset");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, 0), "");
    assert_equals($node->substringData(1, 0), "");
    assert_equals($node->substringData(2, 0), "");
    assert_equals($node->substringData(3, 0), "");
    assert_equals($node->substringData(4, 0), "");
  }, $type . "->substringData() with zero count");
;
  /*test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0x100000000 + 0, 1), "t");
    assert_equals($node->substringData(0x100000000 + 1, 1), "e");
    assert_equals($node->substringData(0x100000000 + 2, 1), "s");
    assert_equals($node->substringData(0x100000000 + 3, 1), "t");
    assert_equals($node->substringData(0x100000000 + 4, 1), "");
  }, $type . "->substringData() with very large offset");*/
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(-0x100000000 + 2, 1), "s");
  }, $type . "->substringData() with negative offset");
;
/*  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData("test", 3), "tes");
  }, $type . "->substringData() with string offset");
;*/
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, 1), "t");
    assert_equals($node->substringData(0, 2), "te");
    assert_equals($node->substringData(0, 3), "tes");
    assert_equals($node->substringData(0, 4), "test");
  }, $type . "->substringData() with in-bounds count");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, 5), "test");
    assert_equals($node->substringData(2, 20), "st");
  }, $type . "->substringData() with large count");
;
  /*test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(2, 0x100000000 + 1), "s");
  }, $type . "->substringData() with very large count");*/
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_equals($node->substringData(0, -1), "test");
    assert_equals($node->substringData(0, -0x100000000 + 2), "te");
  }, $type . "->substringData() with negative count");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->data = "This is the character data test, other è³‡æ–™ï¼Œæ›´å¤šæ–‡å­—";
;
    assert_equals($node->substringData(12, 4), "char");
    assert_equals($node->substringData(39, 2), "è³‡æ–™");
  }, $type . "->substringData() with non-ASCII data");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->data = "ğŸŒ  test ğŸŒ  TEST";
;
    assert_equals($node->substringData(4, 7), "st ğŸŒ  TE");  // DEVIATION: UTF8!!! Counting UTF-16 code units;
  }, $type . "->substringData() with non-BMP data");
};
;
testNode(function() {global $document; return $document->createTextNode("test"); }, "Text");
testNode(function() {global $document; return $document->createComment("test"); }, "Comment");
;