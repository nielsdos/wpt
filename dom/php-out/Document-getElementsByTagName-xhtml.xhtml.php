<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Document-getElementsByTagName-xhtml.xhtml");
$document = DOM\XMLDocument::createFromString($html);
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("http://www.w3.org/1999/xhtml", "I"));
  assert_equals($t->localName, "I");
  assert_equals($t->tagName, "I");
  assert_array_equals($document2->getElementsByTagName("I"), [$t]);
  assert_array_equals($document2->getElementsByTagName("i"), []);
  assert_array_equals($document2->getElementsByTagName("body")[0]->getElementsByTagName("I"), [$t]);
  assert_array_equals($document2->getElementsByTagName("body")[0]->getElementsByTagName("i"), []);
}, "HTML element with uppercase tag name matches in XHTML documents");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "st"));
  assert_array_equals($document2->getElementsByTagName("st"), [$t]);
  assert_array_equals($document2->getElementsByTagName("ST"), []);
}, "Element in non-HTML namespace, no prefix, lowercase name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "ST"));
  assert_array_equals($document2->getElementsByTagName("ST"), [$t]);
  assert_array_equals($document2->getElementsByTagName("st"), []);
}, "Element in non-HTML namespace, no prefix, uppercase name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "te:st"));
  assert_array_equals($document2->getElementsByTagName("st"), []);
  assert_array_equals($document2->getElementsByTagName("ST"), []);
  assert_array_equals($document2->getElementsByTagName("te:st"), [$t]);
  assert_array_equals($document2->getElementsByTagName("te:ST"), []);
}, "Element in non-HTML namespace, prefix, lowercase name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "te:ST"));
  assert_array_equals($document2->getElementsByTagName("ST"), []);
  assert_array_equals($document2->getElementsByTagName("st"), []);
  assert_array_equals($document2->getElementsByTagName("te:st"), []);
  assert_array_equals($document2->getElementsByTagName("te:ST"), [$t]);
}, "Element in non-HTML namespace, prefix, uppercase name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElement("AÇ"));
  assert_array_equals($document2->getElementsByTagName("AÇ"), [$t], "All uppercase input");
  assert_array_equals($document2->getElementsByTagName("aÇ"), [], "Ascii lowercase input");
  assert_array_equals($document2->getElementsByTagName("aç"), [], "All lowercase input");
}, "Element in HTML namespace, no prefix, non-ascii characters in name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "AÇ"));
  assert_array_equals($document2->getElementsByTagName("AÇ"), [$t], "All uppercase input");
  assert_array_equals($document2->getElementsByTagName("aÇ"), [], "Ascii lowercase input");
  assert_array_equals($document2->getElementsByTagName("aç"), [], "All lowercase input");
}, "Element in non-HTML namespace, non-ascii characters in name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("http://www.w3.org/1999/xhtml", "test:aÇ"));
  assert_array_equals($document2->getElementsByTagName("TEST:AÇ"), [], "All uppercase input");
  assert_array_equals($document2->getElementsByTagName("test:aÇ"), [$t], "Ascii lowercase input");
  assert_array_equals($document2->getElementsByTagName("test:aç"), [], "All lowercase input");
}, "Element in HTML namespace, prefix, non-ascii characters in name");
;
test(function() {global $document;
  $document2 = clone $document;
  $t = $document2->getElementsByTagName("body")[0]->appendChild($document2->createElementNS("test", "TEST:AÇ"));
  assert_array_equals($document2->getElementsByTagName("TEST:AÇ"), [$t], "All uppercase input");
  assert_array_equals($document2->getElementsByTagName("test:aÇ"), [], "Ascii lowercase input");
  assert_array_equals($document2->getElementsByTagName("test:aç"), [], "All lowercase input");
}, "Element in non-HTML namespace, prefix, non-ascii characters in name");
;
test(function() {global $document;
  $actual = $document->getElementsByTagName("*");
  $expected = [];
  $get_elements = function($node) use(&$expected,&$get_elements) {
    for ($i = 0; $i < $node->childNodes->length; $i++) {;
      $child = $node->childNodes[$i];
      if ($child->nodeType === XML_ELEMENT_NODE) {;
        $expected[]=$child;
        $get_elements($child);
      };
    };
  };
  $get_elements($document);
  assert_array_equals($actual, $expected);
}, "getElementsByTagName('*')");
;