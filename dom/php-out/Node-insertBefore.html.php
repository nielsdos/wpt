<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Node-insertBefore.html");
$document = DOM\HTMLDocument::createFromString($html);
;/*
preInsertionValidateHierarchy("insertBefore");
;*/
function testLeafNode($nodeName, $createNodeFunction) {global $document;
  /*test(function() use ($nodeName, $createNodeFunction) {global $document;
    $node = createNodeFunction();
    assert_throws_js(TypeError, function() {global $document; $node->insertBefore(null, null); });
  }, "Calling insertBefore with a non-Node first argument on a leaf node " + $nodeName + " must throw TypeError->");*/
  test(function() use ($nodeName, $createNodeFunction) {global $document;
    $node = $createNodeFunction();
    assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($node) {global $document; $node->insertBefore($document->createTextNode("fail"), null); });
    // Would be step 2->;
    assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($node) {global $document; $node->insertBefore($node, null); });
    // Would be step 3->;
    assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($node) {global $document; $node->insertBefore($node, $document->createTextNode("child")); });
  }, "Calling insertBefore an a leaf node " . $nodeName . " must throw HIERARCHY_REQUEST_ERR->");
};
/*
test(function() use ($nodeName, $createNodeFunction) {global $document;
  // WebIDL: first argument->;
  assert_throws_js(TypeError, function() {global $document; $document->body->insertBefore(null, null) });
  assert_throws_js(TypeError, function() {global $document; $document->body->insertBefore(null, $document->body->firstChild) });
  assert_throws_js(TypeError, function() {global $document; $document->body->insertBefore({'a':'b'}, $document->body->firstChild) });
}, "Calling insertBefore with a non-Node first argument must throw TypeError->");
;
test(function() use ($nodeName, $createNodeFunction) {global $document;
  // WebIDL: second argument->;
  assert_throws_js(TypeError, function() {global $document; $document->body->insertBefore($document->createTextNode("child")) });
  assert_throws_js(TypeError, function() {global $document; $document->body->insertBefore($document->createTextNode("child"), {'a':'b'}) });
}, "Calling insertBefore with second argument missing, or other than Node, null, or undefined, must throw TypeError->");
;*/
testLeafNode("DocumentType", function () { global $document;return $document->doctype; } );
testLeafNode("Text", function () { global $document;return $document->createTextNode("Foo"); });
testLeafNode("Comment", function () { global $document;return $document->createComment("Foo"); });
testLeafNode("ProcessingInstruction", function () { global $document; return $document->createProcessingInstruction("foo", "bar"); });
;
test(function() {global $document;
  // Step 2->;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() {global $document; $document->getElementsByTagName("body")[0]->insertBefore($document->getElementsByTagName("body")[0], $document->getElementById("log")); });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() {global $document; $document->getElementsByTagName("body")[0]->insertBefore($document->documentElement, $document->getElementById("log")); });
}, "Calling insertBefore with an inclusive ancestor of the context object must throw HIERARCHY_REQUEST_ERR->");
;
// Step 3->;
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  assert_throws_dom("NOT_FOUND_ERR", function() use ($a,$b,$c) {global $document;;
    $a->insertBefore($b, $c);
  });
}, "Calling insertBefore with a reference child whose parent is not the context node must throw a NOT_FOUND_ERR->");
;
// Step 4->1->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $doc2 = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$doc2) {global $document;;
    $doc->insertBefore($doc->importNode($doc2->documentElement, true), $doc->documentElement);
  });
;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc) {global $document;;
    $doc->insertBefore($doc->createTextNode("text"), $doc->documentElement);
  });
}, "If the context node is a document, inserting a document or text node should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 4->2->1->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $doc->removeChild($doc->documentElement);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  $df->appendChild($doc->createElement("b"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->insertBefore($df, $doc->firstChild);
  });
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createTextNode("text"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->insertBefore($df, $doc->firstChild);
  });
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createComment("comment"));
  $df->appendChild($doc->createTextNode("text"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->insertBefore($df, $doc->firstChild);
  });
}, "If the context node is a document, inserting a DocumentFragment that contains a text node or too many elements should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 4->2->2->;
test(function() {global $document;
  // The context node has an element child->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->appendChild($doc->createComment("foo"));
  assert_array_equals($doc->childNodes, [$doc->doctype, $doc->documentElement, $comment]);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->insertBefore($df, $doc->doctype);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function()  use ($doc,$df){global $document;;
    $doc->insertBefore($df, $doc->documentElement);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df,$comment) {global $document;;
    $doc->insertBefore($df, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->insertBefore($df, null);
  });
}, "If the context node is a document, inserting a DocumentFragment with an element if there already is an element child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  // /child/ is a $doctype->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($df,$doc) {global $document;;
    $doc->insertBefore($df, $doc->doctype);
  });
}, "If the context node is a document and a doctype is following the reference child, inserting a DocumentFragment with an element should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  // /child/ is not null and a doctype is following /child/->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($df,$doc,$comment) {global $document;;
    $doc->insertBefore($df, $comment);
  });
}, "If the context node is a document, inserting a DocumentFragment with an element before the doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 4->3->;
test(function() {global $document;
  // The context node has an element child->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->appendChild($doc->createComment("foo"));
  assert_array_equals($doc->childNodes, [$doc->doctype, $doc->documentElement, $comment]);
;
  $a = $doc->createElement("a");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$a,$comment) {global $document;;
    $doc->insertBefore($a, $doc->doctype);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function()  use($doc,$a,$comment){global $document;;
    $doc->insertBefore($a, $doc->documentElement);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$a,$comment) {global $document;;
    $doc->insertBefore($a, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$a,$comment) {global $document;;
    $doc->insertBefore($a, null);
  });
}, "If the context node is a document, inserting an element if there already is an element child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  // /child/ is a $doctype->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $a = $doc->createElement("a");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$a) {global $document;;
    $doc->insertBefore($a, $doc->doctype);
  });
}, "If the context node is a document, inserting an element before the doctype should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  // /child/ is not null and a doctype is following /child/->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $a = $doc->createElement("a");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$a,$comment) {global $document;;
    $doc->insertBefore($a, $comment);
  });
}, "If the context node is a document and a doctype is following the reference child, inserting an element should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 4->4->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype, $doc->documentElement]);
;
  $doctype = $doc->importNode(DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>")->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc, $doctype, $comment) {global $document;;
    $doc->insertBefore($doctype, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc, $doctype) {global $document;;
    $doc->insertBefore($doctype, $doc->doctype);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc, $doctype) {global $document;;
    $doc->insertBefore($doctype, $doc->documentElement);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc, $doctype) {global $document;;
    $doc->insertBefore($doctype, null);
  });
}, "If the context node is a document, inserting a doctype if there already is a doctype child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  $comment = $doc->appendChild($doc->createComment("foo"));
  $doc->removeChild($doc->doctype);
  assert_array_equals($doc->childNodes, [$doc->documentElement, $comment]);
;
  $doctype = $doc->importNode(DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>")->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$comment,$doctype) {global $document;;
    $doc->insertBefore($doctype, $comment);
  });
}, "If the context node is a document, inserting a doctype after the document element should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createEmpty();
  $comment = $doc->appendChild($doc->createComment("foo"));
  $doc->removeChild($doc->doctype);
  assert_array_equals($doc->childNodes, [$doc->documentElement, $comment]);
;
$doctype = $doc->importNode(DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>")->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$doctype) {global $document;;
    $doc->insertBefore($doctype, null);
  });
}, "If the context node is a document with and element child, appending a doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 5->;
test(function() {global $document;
  $df = $document->createDocumentFragment();
  $a = $df->appendChild($document->createElement("a"));
;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($df,$doc,$a) {global $document;;
    $df->insertBefore($document->importNode($doc->doctype,true), $a);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($df,$doc) {global $document;;
    $df->insertBefore($document->importNode($doc->doctype,true), null);
  });
;
  $doctype = $document->importNode($doc->doctype->cloneNode(), true);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($df,$doctype,$a) {global $document;;
    $df->insertBefore($doctype, $a);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use( $df,$doctype) {global $document;;
    $df->insertBefore($doctype, null);
  });
}, "If the context node is a DocumentFragment, inserting a document or a doctype should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $el = $document->createElement("div");
  $a = $el->appendChild($document->createElement("a"));
;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$el,$a) {global $document;;
    $el->insertBefore($document->importNode($doc->doctype), $a);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$el) {global $document;;
    $el->insertBefore($document->importNode($doc->doctype), null);
  });
;
  $doctype = $document->importNode(DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>")->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($el, $doctype, $a) {global $document;;
    $el->insertBefore($doctype, $a);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($el, $doctype) {global $document;;
    $el->insertBefore($doctype, null);
  });
}, "If the context node is an element, inserting a document or a doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 7->;
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  $a->appendChild($b);
  $a->appendChild($c);
  assert_array_equals($a->childNodes, [$b, $c]);
  assert_equals($a->insertBefore($b, $b), $b);
  assert_array_equals($a->childNodes, [$b, $c]);
  assert_equals($a->insertBefore($c, $c), $c);
  assert_array_equals($a->childNodes, [$b, $c]);
}, "Inserting a node before itself should not move the node");
;