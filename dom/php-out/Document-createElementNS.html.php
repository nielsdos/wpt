<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Document-createElementNS.html");
$document = DOM\HTMLDocument::createFromString($html);

test(function() {global $document;
  $HTMLNS = "http://www.w3.org/1999/xhtml";
  $element = $document->createElementNS($HTMLNS, "span");
  assert_equals($element->namespaceURI, $HTMLNS);
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_true($element instanceof HTMLElement, "Should be an HTMLElement");
  //assert_true($element instanceof HTMLSpanElement, "Should be an HTMLSpanElement");
}, "Lower-case HTML element without a prefix");
;
test(function() {global $document;
  $HTMLNS = "http://www.w3.org/1999/xhtml";
  $element = $document->createElementNS($HTMLNS, "html:span");
  assert_equals($element->namespaceURI, $HTMLNS);
  assert_equals($element->prefix, "html");
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "HTML:SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_true($element instanceof HTMLElement, "Should be an HTMLElement");
  //assert_true($element instanceof HTMLSpanElement, "Should be an HTMLSpanElement");
}, "Lower-case HTML element with a prefix");
;
test(function() {global $document;
  $element = $document->createElementNS("test", "span");
  assert_equals($element->namespaceURI, "test");
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "span");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Lower-case non-HTML element without a prefix");
;
test(function() {global $document;
  $element = $document->createElementNS("test", "html:span");
  assert_equals($element->namespaceURI, "test");
  assert_equals($element->prefix, "html");
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "html:span");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Lower-case non-HTML element with a prefix");
;
test(function() {global $document;
  $HTMLNS = "http://www.w3.org/1999/xhtml";
  $element = $document->createElementNS($HTMLNS, "SPAN");
  assert_equals($element->namespaceURI, $HTMLNS);
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "SPAN");
  assert_equals($element->tagName, "SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_true($element instanceof HTMLElement, "Should be an HTMLElement");
  //assert_true($element instanceof HTMLUnknownElement, "Should be an HTMLUnknownElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Upper-case HTML element without a prefix");
;
test(function() {global $document;
  $HTMLNS = "http://www.w3.org/1999/xhtml";
  $element = $document->createElementNS($HTMLNS, "html:SPAN");
  assert_equals($element->namespaceURI, $HTMLNS);
  assert_equals($element->prefix, "html");
  assert_equals($element->localName, "SPAN");
  assert_equals($element->tagName, "HTML:SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_true($element instanceof HTMLElement, "Should be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Upper-case HTML element with a prefix");
;
test(function() {global $document;
  $element = $document->createElementNS("test", "SPAN");
  assert_equals($element->namespaceURI, "test");
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "SPAN");
  assert_equals($element->tagName, "SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Upper-case non-HTML element without a prefix");
;
test(function() {global $document;
  $element = $document->createElementNS("test", "html:SPAN");
  assert_equals($element->namespaceURI, "test");
  assert_equals($element->prefix, "html");
  assert_equals($element->localName, "SPAN");
  assert_equals($element->tagName, "html:SPAN");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "Upper-case non-HTML element with a prefix");
;
test(function() {global $document;
  $element = $document->createElementNS(null, "span");
  assert_equals($element->namespaceURI, null);
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "span");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "null namespace");
;
test(function() {global $document;
  $element = $document->createElementNS("", "span");
  assert_equals($element->namespaceURI, null);
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "span");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "undefined namespace");
;
test(function() {global $document;
  $element = $document->createElementNS("", "span");
  assert_equals($element->namespaceURI, null);
  assert_equals($element->prefix, null);
  assert_equals($element->localName, "span");
  assert_equals($element->tagName, "span");
  //assert_true($element instanceof Node, "Should be a Node");
  //assert_true($element instanceof Element, "Should be an Element");
  //assert_false($element instanceof HTMLElement, "Should not be an HTMLElement");
  //assert_false($element instanceof HTMLSpanElement, "Should not be an HTMLSpanElement");
}, "empty string namespace");
;