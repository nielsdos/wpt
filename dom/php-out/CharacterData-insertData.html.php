<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/CharacterData-insertData.html");
$document = DOM\HTMLDocument::createFromString($html);
;
function testNode($create, $type) {global $document;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->insertData(5, "x"); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->insertData(5, ""); });
  }, $type . "->insertData() out of bounds");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->insertData(-1, "x"); });
    assert_throws_dom("INDEX_SIZE_ERR", function() use($node) {global $document; $node->insertData(-0x100000000 + 5, "x"); });
  }, $type . "->insertData() negative out of bounds");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->insertData(-0x100000000 + 2, "X");
    assert_equals($node->data, "teXst");
  }, $type . "->insertData() negative in bounds");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->insertData(0, "");
    assert_equals($node->data, "test");
  }, $type . "->insertData('')");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->insertData(0, "X");
    assert_equals($node->data, "Xtest");
  }, $type . "->insertData() at the start");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->insertData(2, "X");
    assert_equals($node->data, "teXst");
  }, $type . "->insertData() in the middle");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->insertData(4, "ing");
    assert_equals($node->data, "testing");
  }, $type . "->insertData() at the end");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    $node->data = "This is the character data, append more è³‡æ–™ï¼Œæ¸¬è©¦è³‡æ–™";
;
    $node->insertData(26, " test");
    assert_equals($node->data, "This is the character data test, append more è³‡æ–™ï¼Œæ¸¬è©¦è³‡æ–™");
    $node->insertData(48, "æ›´å¤š");
    assert_equals($node->data, "This is the character data test, append more è³‡æ–™ï¼Œæ›´å¤šæ¸¬è©¦è³‡æ–™");
  }, $type . "->insertData() with non-ascii data");
;
  test(function() use ($create, $type) {global $document;
    $node = $create();
    assert_equals($node->data, "test");
;
    $node->data = "ğŸŒ  test ğŸŒ  TEST";
;
    $node->insertData(5, "--");  // Counting UTF-16 code units;
    assert_equals($node->data, "ğŸŒ  te--st ğŸŒ  TEST");
  }, $type . "->insertData() with non-BMP data");
};
;
testNode(function() {global $document; return $document->createTextNode("test"); }, "Text");
testNode(function() {global $document; return $document->createComment("test"); }, "Comment");
;