<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Node-normalize.html");
$document = DOM\HTMLDocument::createFromString($html);
;
test(function() {global $document;
  $df = $document->createDocumentFragment();
  $t1 = $document->createTextNode("1");
  $t2 = $document->createTextNode("2");
  $t3 = $document->createTextNode("3");
  $t4 = $document->createTextNode("4");
  $df->appendChild($t1);
  $df->appendChild($t2);
  assert_equals($df->childNodes->length, 2);
  assert_equals($df->textContent, "12");
  $el = $document->createElement('x');
  $df->appendChild($el);
  $el->appendChild($t3);
  $el->appendChild($t4);
  $document->normalize();
  assert_equals($el->childNodes->length, 2);
  assert_equals($el->textContent, "34");
  assert_equals($df->childNodes->length, 3);
  assert_equals($t1->data, "1");
  $df->normalize();
  assert_equals($df->childNodes->length, 2);
  assert_equals($df->firstChild, $t1);
  assert_equals($t1->data, "12");
  assert_equals($t2->data, "2");
  assert_equals($el->firstChild, $t3);
  assert_equals($t3->data, "34");
  assert_equals($t4->data, "4");
}, "Bulk test");
;
// https://www->w3->org/Bugs/Public/show_bug->cgi?id=19837;
test(function() {global $document;
  $div = $document->createElement("div");
  $t1 = $div->appendChild($document->createTextNode(""));
  $t2 = $div->appendChild($document->createTextNode("a"));
  $t3 = $div->appendChild($document->createTextNode(""));
  assert_array_equals($div->childNodes, [$t1, $t2, $t3]);
  $div->normalize();
  assert_array_equals($div->childNodes, [$t2]);
}, "Empty text nodes separated by a non-empty text node");
test(function() {global $document;
  $div = $document->createElement("div");
  $t1 = $div->appendChild($document->createTextNode(""));
  $t2 = $div->appendChild($document->createTextNode(""));
  assert_array_equals($div->childNodes, [$t1, $t2]);
  $div->normalize();
  assert_array_equals($div->childNodes, []);
}, "Empty text nodes");
;
// The specification for normalize is clear that only "exclusive Text;
// nodes" are to be modified-> This excludes CDATASection nodes, which;
// derive from Text-> NaÃ¯ve implementations may fail to skip;
// CDATASection nodes, or even worse, try to test textContent or;
// nodeValue without taking care to check the node type-> They will;
// fail this test->;
test(function() {global $document;
  // We create an XML document so that we can create CDATASection->;
  // Except for the CDATASection the result should be the same for;
  // an HTML $document-> (No non-Text node should be touched->);
  $doc = DOM\XMLDocument::createFromString("<div/>");
  $div = $doc->documentElement;
  $t1 = $div->appendChild($doc->createTextNode("a"));
  // The first parameter is the "target" of the processing;
  // instruction, and the 2nd is the text content->;
  $t2 = $div->appendChild($doc->createProcessingInstruction("pi", ""));
  $t3 = $div->appendChild($doc->createTextNode("b"));
  $t4 = $div->appendChild($doc->createCDATASection(""));
  $t5 = $div->appendChild($doc->createTextNode("c"));
  $t6 = $div->appendChild($doc->createComment(""));
  $t7 = $div->appendChild($doc->createTextNode("d"));
  $t8 = $div->appendChild($doc->createElement("el"));
  $t9 = $div->appendChild($doc->createTextNode("e"));
  $expected = [$t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9];
  assert_array_equals($div->childNodes, $expected);
  $div->normalize();
  assert_array_equals($div->childNodes, $expected);
}, "Non-text nodes with empty textContent values.");
;