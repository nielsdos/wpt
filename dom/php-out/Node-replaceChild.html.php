<?php define('undefined', 'undefined');require __DIR__.'/../driver.inc.php';
$html = file_get_contents(__DIR__."/../nodes/Node-replaceChild.html");
$document = DOM\HTMLDocument::createFromString($html);
;
// IDL->;
/*
test(function() {global $document;
  $a = $document->createElement("div");
  assert_throws_js(TypeError, function() {global $document;;
    $a->replaceChild(null, null);
  });
;
  $b = $document->createElement("div");
  assert_throws_js(TypeError, function() {global $document;;
    $a->replaceChild($b, null);
  });
  assert_throws_js(TypeError, function() {global $document;;
    $a->replaceChild(null, $b);
  });
}, "Passing null to replaceChild should throw a TypeError->");
;*/

function getNonParentNodes() {
  global $document;
  return [
    //document.implementation.createDocumentType("html", "", ""),
    $document->createTextNode("text"),
    $document->createProcessingInstruction("foo", "bar"),
    $document->createComment("comment"),
    //document.implementation.createDocument(null, "foo", null).createCDATASection("data"),
  ];
}

// Step 3->;
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  assert_throws_dom("NOT_FOUND_ERR", function() use ($a,$b,$c) {global $document;;
    $a->replaceChild($b, $c);
  });
;
  $d = $document->createElement("div");
  $d->appendChild($b);
  assert_throws_dom("NOT_FOUND_ERR", function() use ($a,$b,$c) {global $document;;
    $a->replaceChild($b, $c);
  });
  assert_throws_dom("NOT_FOUND_ERR", function() use ($a,$b,$c) {global $document;;
    $a->replaceChild($b, $a);
  });
}, "If child's parent is not the context node, a NotFoundError exception should be thrown");
;
// Step 1->;
test(function() {global $document;
  $nodes = getNonParentNodes();
;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  foreach ($nodes as $node) {
    assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($a,$b,$node) {global $document;;
      $node->replaceChild($a, $b);
    });
  }
}, "If the context node is not a node that can contain children, a HIERARCHY_REQUEST_ERR exception should be thrown");
;
// Step 2->;
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($a,$b) {global $document;;
    $a->replaceChild($a, $a);
  });
;
  $a->appendChild($b);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($a,$b) {global $document;;
    $a->replaceChild($a, $b);
  });
;
  $c = $document->createElement("div");
  $c->appendChild($a);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($a,$b,$c) {global $document;;
    $a->replaceChild($c, $b);
  });
}, "If node is an inclusive ancestor of the context node, a HIERARCHY_REQUEST_ERR should be thrown->");
;
// Steps 4/5->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $doc2 = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$doc2) {global $document;;
    $doc->replaceChild($doc2, $doc->documentElement);
  });
;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc) {global $document;;
    $doc->replaceChild($doc->createTextNode("text"), $doc->documentElement);
  });
}, "If the context node is a document, inserting a document or text node should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 6->1->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  $df->appendChild($doc->createElement("b"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function()  use($doc,$df){global $document;;
    $doc->replaceChild($df, $doc->documentElement);
  });
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createTextNode("text"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$df) {global $document;;
    $doc->replaceChild($df, $doc->documentElement);
  });
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createComment("comment"));
  $df->appendChild($doc->createTextNode("text"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$df) {global $document;;
    $doc->replaceChild($df, $doc->documentElement);
  });
}, "If the context node is a document, inserting a DocumentFragment that contains a text node or too many elements should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $doc->removeChild($doc->documentElement);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  $df->appendChild($doc->createElement("b"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->replaceChild($df, $doc->doctype);
  });
}, "If the context node is a document (without element children), inserting a DocumentFragment that contains multiple elements should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 6->1->;
test(function() {global $document;
  // The context node has an element child that is not /child/->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->appendChild($doc->createComment("foo"));
  assert_array_equals($doc->childNodes, [$doc->doctype, $doc->documentElement, $comment]);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use($doc,$df,$comment) {global $document;;
    $doc->replaceChild($df, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df) {global $document;;
    $doc->replaceChild($df, $doc->doctype);
  });
}, "If the context node is a document, inserting a DocumentFragment with an element if there already is an element child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  // A doctype is following /child/->;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $df = $doc->createDocumentFragment();
  $df->appendChild($doc->createElement("a"));
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df,$comment) {global $document;;
    $doc->replaceChild($df, $comment);
  });
}, "If the context node is a document, inserting a DocumentFragment with an element before the doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 6->2->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->appendChild($doc->createComment("foo"));
  assert_array_equals($doc->childNodes, [$doc->doctype, $doc->documentElement, $comment]);
;
  $a = $doc->createElement("a");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$a,$comment) {global $document;;
    $doc->replaceChild($a, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$a) {global $document;;
    $doc->replaceChild($a, $doc->doctype);
  });
}, "If the context node is a document, inserting an element if there already is an element child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  $doc->removeChild($doc->documentElement);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype]);
;
  $a = $doc->createElement("a");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function()  use ($doc,$a,$comment){global $document;;
    $doc->replaceChild($a, $comment);
  });
}, "If the context node is a document, inserting an element before the doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 6->3->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->insertBefore($doc->createComment("foo"), $doc->firstChild);
  assert_array_equals($doc->childNodes, [$comment, $doc->doctype, $doc->documentElement]);
;
  $doctype = $doc->importNode((DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>"))->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$doctype,$comment) {global $document;;
    $doc->replaceChild($doctype, $comment);
  });
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$doctype) {global $document;;
    $doc->replaceChild($doctype, $doc->documentElement);
  });
}, "If the context node is a document, inserting a doctype if there already is a doctype child should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $comment = $doc->appendChild($doc->createComment("foo"));
  $doc->removeChild($doc->doctype);
  assert_array_equals($doc->childNodes, [$doc->documentElement, $comment]);
;
  $doctype = $doc->importNode((DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>"))->doctype);
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$doctype,$comment) {global $document;;
    $doc->replaceChild($doctype, $comment);
  });
}, "If the context node is a document, inserting a doctype after the document element should throw a HIERARCHY_REQUEST_ERR->");
;
// Steps 4/5->;
test(function() {global $document;
  $df = $document->createDocumentFragment();
  $a = $df->appendChild($document->createElement("a"));
;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$df,$a) {global $document;;
    $df->replaceChild($doc, $a);
  });
;
  $doctype = $document->implementation->createDocumentType("html", "", "");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doctype,$df,$a) {global $document;;
    $df->replaceChild($doctype, $a);
  });
}, "If the context node is a DocumentFragment, inserting a document or a doctype should throw a HIERARCHY_REQUEST_ERR->");
test(function() {global $document;
  $el = $document->createElement("div");
  $a = $el->appendChild($document->createElement("a"));
;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doc,$a,$el) {global $document;;
    $el->replaceChild($doc, $a);
  });
;
  $doctype = $document->implementation->createDocumentType("html", "", "");
  assert_throws_dom("HIERARCHY_REQUEST_ERR", function() use ($doctype,$a,$el) {global $document;;
    $el->replaceChild($doctype, $a);
  });
}, "If the context node is an element, inserting a document or a doctype should throw a HIERARCHY_REQUEST_ERR->");
;
// Step 6->;
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  $a->appendChild($b);
  $a->appendChild($c);
  assert_array_equals($a->childNodes, [$b, $c]);
  assert_equals($a->replaceChild($c, $b), $b);
  assert_array_equals($a->childNodes, [$c]);
}, "Replacing a node with its next sibling should work (2 children)");
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  $d = $document->createElement("div");
  $e = $document->createElement("div");
  $a->appendChild($b);
  $a->appendChild($c);
  $a->appendChild($d);
  $a->appendChild($e);
  assert_array_equals($a->childNodes, [$b, $c, $d, $e]);
  assert_equals($a->replaceChild($d, $c), $c);
  assert_array_equals($a->childNodes, [$b, $d, $e]);
}, "Replacing a node with its next sibling should work (4 children)");
test(function() {global $document;
  $a = $document->createElement("div");
  $b = $document->createElement("div");
  $c = $document->createElement("div");
  $a->appendChild($b);
  $a->appendChild($c);
  assert_array_equals($a->childNodes, [$b, $c]);
  assert_equals($a->replaceChild($b, $b), $b);
  assert_array_equals($a->childNodes, [$b, $c]);
  assert_equals($a->replaceChild($c, $c), $c);
  assert_array_equals($a->childNodes, [$b, $c]);
}, "Replacing a node with itself should not move the node");
;
// Step 7->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $doctype = $doc->doctype;
  assert_array_equals($doc->childNodes, [$doctype, $doc->documentElement]);
;
  $doc2 = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $doctype2 = $doc2->doctype;
  assert_array_equals($doc2->childNodes, [$doctype2, $doc2->documentElement]);
;
  $doc->replaceChild($doc2->doctype, $doc->doctype);
  assert_array_equals($doc->childNodes, [$doctype2, $doc->documentElement]);
  assert_array_equals($doc2->childNodes, [$doc2->documentElement]);
  assert_equals($doctype->parentNode, null);
  assert_equals($doctype->ownerDocument, $doc);
  assert_equals($doctype2->parentNode, $doc);
  assert_equals($doctype2->ownerDocument, $doc);
}, "If the context node is a document, inserting a new doctype should work->");
;
// Bugs->;
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $df = $doc->createDocumentFragment();
  $a = $df->appendChild($doc->createElement("a"));
  assert_equals($doc->documentElement, $doc->replaceChild($df, $doc->documentElement));
  assert_array_equals($doc->childNodes, [$doc->doctype, $a]);
}, "Replacing the document element with a DocumentFragment containing a single element should work->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $df = $doc->createDocumentFragment();
  $a = $df->appendChild($doc->createComment("a"));
  $b = $df->appendChild($doc->createElement("b"));
  $c = $df->appendChild($doc->createComment("c"));
  assert_equals($doc->documentElement, $doc->replaceChild($df, $doc->documentElement));
  assert_array_equals($doc->childNodes, [$doc->doctype, $a, $b, $c]);
}, "Replacing the document element with a DocumentFragment containing a single element and comments should work->");
test(function() {global $document;
  $doc = DOM\HTMLDocument::createFromString("<!DOCTYPE html><html></html>");;
  $a = $doc->createElement("a");
  assert_equals($doc->documentElement, $doc->replaceChild($a, $doc->documentElement));
  assert_array_equals($doc->childNodes, [$doc->doctype, $a]);
}, "Replacing the document element with a single element should work->");
/*test(function() {global $document;
  $document->addEventListener("DOMNodeRemoved", function($e) {;
    $document->body->appendChild($document->createElement("x"));
  }, false);
  $a = $document->body->firstChild; $b = $a->firstChild; $c = $b->nextSibling;
  assert_equals($a->replaceChild($c, $b), $b);
  assert_equals($b->parentNode, null);
  assert_equals($a->firstChild, $c);
  assert_equals($c->parentNode, $a);
}, "replaceChild should work in the presence of mutation events->");*/
test(function() {global $document;
  $TEST_ID = "findme";
  $gBody = $document->getElementsByTagName("body")[0];
  $parent = $document->createElement("div");
  $gBody->appendChild($parent);
  $child = $document->createElement("div");
  $parent->appendChild($child);
  $df = $document->createDocumentFragment();
  $fragChild = $df->appendChild($document->createElement("div"));
  $fragChild->setAttribute("id", $TEST_ID);
  $parent->replaceChild($df, $child);
  assert_equals($document->getElementById($TEST_ID), $fragChild, "should not be null");
}, "Replacing an element with a DocumentFragment should allow a child of the DocumentFragment to be found by Id->");
;
;